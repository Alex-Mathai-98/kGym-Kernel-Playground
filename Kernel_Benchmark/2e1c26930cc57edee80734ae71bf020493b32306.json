{
    "version": 1,
    "title": "KASAN: slab-out-of-bounds Read in fl6_update_dst",
    "display-title": "KASAN: slab-out-of-bounds Read in fl6_update_dst",
    "id": "2e1c26930cc57edee80734ae71bf020493b32306",
    "status": "fixed",
    "fix-commits": [
        {
            "title": "seg6: fix seg6_validate_srh() to avoid slab-out-of-bounds",
            "link": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=bb986a50421a11bf31a81afb15b9b8f45a4a3a11",
            "hash": "bb986a50421a11bf31a81afb15b9b8f45a4a3a11",
            "repo": "git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
            "branch": "master"
        }
    ],
    "cause-commit": {
        "title": "seg6: fix SRH processing to comply with RFC8754",
        "link": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=0cb7498f234e4e7d75187a8cae6c7c2053f2488a",
        "hash": "0cb7498f234e4e7d75187a8cae6c7c2053f2488a",
        "repo": "git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
        "branch": "master"
    },
    "discussions": [
        "https://lore.kernel.org/all/000000000000dd891a05a56369b8@google.com/T/",
        "https://lore.kernel.org/all/20200602065155.18272-1-yuehaibing@huawei.com/T/",
        "https://lore.kernel.org/all/20200603065442.2745-1-ahabdels@gmail.com/T/",
        "https://lore.kernel.org/all/20200707145800.925304888@linuxfoundation.org/T/"
    ],
    "crashes": [
        {
            "title": "",
            "syz-reproducer": "/text?tag=ReproSyz&x=102bfda2100000",
            "c-reproducer": "/text?tag=ReproC&x=13f8510c100000",
            "kernel-config": "/text?tag=KernelConfig&x=efdde85c3af536b5",
            "kernel-source-git": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?id=2ef96a5bb12be62ef75b5828c0aab838ebb29cb8",
            "kernel-source-commit": "2ef96a5bb12be62ef75b5828c0aab838ebb29cb8",
            "syzkaller-git": "https://github.com/google/syzkaller/commits/f8f57555cd9496188673f14b02ce8e1f13ce508c",
            "syzkaller-commit": "f8f57555cd9496188673f14b02ce8e1f13ce508c",
            "compiler-description": "gcc (GCC) 9.0.0 20181231 (experimental)",
            "architecture": "amd64",
            "crash-report-link": "/text?tag=CrashReport&x=11982714100000"
        }
    ],
    "subsystems": [
        "net"
    ],
    "parent_of_fix_commit": "5e9eeccc58f3e6bcc99b929670665d2ce047e9c9",
    "patch": "diff --git a/include/net/seg6.h b/include/net/seg6.h\nindex 640724b35273..9d19c15e8545 100644\n--- a/include/net/seg6.h\n+++ b/include/net/seg6.h\n@@ -57,7 +57,7 @@ extern void seg6_iptunnel_exit(void);\n extern int seg6_local_init(void);\n extern void seg6_local_exit(void);\n \n-extern bool seg6_validate_srh(struct ipv6_sr_hdr *srh, int len);\n+extern bool seg6_validate_srh(struct ipv6_sr_hdr *srh, int len, bool reduced);\n extern int seg6_do_srh_encap(struct sk_buff *skb, struct ipv6_sr_hdr *osrh,\n \t\t\t     int proto);\n extern int seg6_do_srh_inline(struct sk_buff *skb, struct ipv6_sr_hdr *osrh);\ndiff --git a/net/core/filter.c b/net/core/filter.c\nindex d01a244b5087..209482a4eaa2 100644\n--- a/net/core/filter.c\n+++ b/net/core/filter.c\n@@ -5050,7 +5050,7 @@ static int bpf_push_seg6_encap(struct sk_buff *skb, u32 type, void *hdr, u32 len\n \tint err;\n \tstruct ipv6_sr_hdr *srh = (struct ipv6_sr_hdr *)hdr;\n \n-\tif (!seg6_validate_srh(srh, len))\n+\tif (!seg6_validate_srh(srh, len, false))\n \t\treturn -EINVAL;\n \n \tswitch (type) {\ndiff --git a/net/ipv6/ipv6_sockglue.c b/net/ipv6/ipv6_sockglue.c\nindex 2c843ff5e3a9..20576e87a5f7 100644\n--- a/net/ipv6/ipv6_sockglue.c\n+++ b/net/ipv6/ipv6_sockglue.c\n@@ -493,7 +493,7 @@ static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,\n \t\t\t\tstruct ipv6_sr_hdr *srh = (struct ipv6_sr_hdr *)\n \t\t\t\t\t\t\t  opt->srcrt;\n \n-\t\t\t\tif (!seg6_validate_srh(srh, optlen))\n+\t\t\t\tif (!seg6_validate_srh(srh, optlen, false))\n \t\t\t\t\tgoto sticky_done;\n \t\t\t\tbreak;\n \t\t\t}\ndiff --git a/net/ipv6/seg6.c b/net/ipv6/seg6.c\nindex 37b434293bda..d2f8138e5a73 100644\n--- a/net/ipv6/seg6.c\n+++ b/net/ipv6/seg6.c\n@@ -25,7 +25,7 @@\n #include <net/seg6_hmac.h>\n #endif\n \n-bool seg6_validate_srh(struct ipv6_sr_hdr *srh, int len)\n+bool seg6_validate_srh(struct ipv6_sr_hdr *srh, int len, bool reduced)\n {\n \tunsigned int tlv_offset;\n \tint max_last_entry;\n@@ -37,13 +37,17 @@ bool seg6_validate_srh(struct ipv6_sr_hdr *srh, int len)\n \tif (((srh->hdrlen + 1) << 3) != len)\n \t\treturn false;\n \n-\tmax_last_entry = (srh->hdrlen / 2) - 1;\n-\n-\tif (srh->first_segment > max_last_entry)\n+\tif (!reduced && srh->segments_left > srh->first_segment) {\n \t\treturn false;\n+\t} else {\n+\t\tmax_last_entry = (srh->hdrlen / 2) - 1;\n \n-\tif (srh->segments_left > srh->first_segment + 1)\n-\t\treturn false;\n+\t\tif (srh->first_segment > max_last_entry)\n+\t\t\treturn false;\n+\n+\t\tif (srh->segments_left > srh->first_segment + 1)\n+\t\t\treturn false;\n+\t}\n \n \ttlv_offset = sizeof(*srh) + ((srh->first_segment + 1) << 4);\n \ndiff --git a/net/ipv6/seg6_iptunnel.c b/net/ipv6/seg6_iptunnel.c\nindex c7cbfeae94f5..e0e9f48ab14f 100644\n--- a/net/ipv6/seg6_iptunnel.c\n+++ b/net/ipv6/seg6_iptunnel.c\n@@ -426,7 +426,7 @@ static int seg6_build_state(struct net *net, struct nlattr *nla,\n \t}\n \n \t/* verify that SRH is consistent */\n-\tif (!seg6_validate_srh(tuninfo->srh, tuninfo_len - sizeof(*tuninfo)))\n+\tif (!seg6_validate_srh(tuninfo->srh, tuninfo_len - sizeof(*tuninfo), false))\n \t\treturn -EINVAL;\n \n \tnewts = lwtunnel_state_alloc(tuninfo_len + sizeof(*slwt));\ndiff --git a/net/ipv6/seg6_local.c b/net/ipv6/seg6_local.c\nindex 52493423f329..eba23279912d 100644\n--- a/net/ipv6/seg6_local.c\n+++ b/net/ipv6/seg6_local.c\n@@ -87,7 +87,7 @@ static struct ipv6_sr_hdr *get_srh(struct sk_buff *skb)\n \t */\n \tsrh = (struct ipv6_sr_hdr *)(skb->data + srhoff);\n \n-\tif (!seg6_validate_srh(srh, len))\n+\tif (!seg6_validate_srh(srh, len, true))\n \t\treturn NULL;\n \n \treturn srh;\n@@ -495,7 +495,7 @@ bool seg6_bpf_has_valid_srh(struct sk_buff *skb)\n \t\t\treturn false;\n \n \t\tsrh->hdrlen = (u8)(srh_state->hdrlen >> 3);\n-\t\tif (!seg6_validate_srh(srh, (srh->hdrlen + 1) << 3))\n+\t\tif (!seg6_validate_srh(srh, (srh->hdrlen + 1) << 3, true))\n \t\t\treturn false;\n \n \t\tsrh_state->valid = true;\n@@ -670,7 +670,7 @@ static int parse_nla_srh(struct nlattr **attrs, struct seg6_local_lwt *slwt)\n \tif (len < sizeof(*srh) + sizeof(struct in6_addr))\n \t\treturn -EINVAL;\n \n-\tif (!seg6_validate_srh(srh, len))\n+\tif (!seg6_validate_srh(srh, len, false))\n \t\treturn -EINVAL;\n \n \tslwt->srh = kmemdup(srh, len, GFP_KERNEL);\n",
    "patch_modified_files": [
        "include/net/seg6.h",
        "net/core/filter.c",
        "net/ipv6/ipv6_sockglue.c",
        "net/ipv6/seg6.c",
        "net/ipv6/seg6_iptunnel.c",
        "net/ipv6/seg6_local.c"
    ]
}