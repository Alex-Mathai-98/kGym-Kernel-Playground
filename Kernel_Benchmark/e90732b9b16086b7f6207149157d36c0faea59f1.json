{
    "version": 1,
    "title": "memory leak in crypto_create_tfm_node",
    "display-title": "memory leak in crypto_create_tfm_node",
    "id": "e90732b9b16086b7f6207149157d36c0faea59f1",
    "status": "fixed",
    "fix-commits": [
        {
            "title": "fscrypt: fix keyring memory leak on mount failure",
            "link": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=ccd30a476f8e864732de220bd50e6f372f5ebcab",
            "hash": "ccd30a476f8e864732de220bd50e6f372f5ebcab",
            "repo": "git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
            "branch": "master"
        }
    ],
    "discussions": [
        "https://lore.kernel.org/all/0000000000009aad5e05eac85f36@google.com/T/",
        "https://lore.kernel.org/all/20221011213838.209879-1-ebiggers@kernel.org/T/"
    ],
    "crashes": [
        {
            "title": "memory leak in crypto_create_tfm_node",
            "syz-reproducer": "/text?tag=ReproSyz&x=17a1d5fa880000",
            "c-reproducer": "/text?tag=ReproC&x=12f77e34880000",
            "kernel-config": "/text?tag=KernelConfig&x=10f41fbb818af57a",
            "kernel-source-git": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?id=4c86114194e644b6da9107d75910635c9e87179e",
            "kernel-source-commit": "4c86114194e644b6da9107d75910635c9e87179e",
            "syzkaller-git": "https://github.com/google/syzkaller/commits/0de35f24a4d2da07a3436f9d227c30d15f508beb",
            "syzkaller-commit": "0de35f24a4d2da07a3436f9d227c30d15f508beb",
            "compiler-description": "gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2",
            "architecture": "amd64",
            "crash-report-link": "/text?tag=CrashReport&x=1391c878880000"
        }
    ],
    "subsystems": [
        "ext4",
        "crypto"
    ],
    "parent_of_fix_commit": "9abf2313adc1ca1b6180c508c25f22f9395cc780",
    "patch": "diff --git a/fs/crypto/keyring.c b/fs/crypto/keyring.c\nindex 1cca09aa43f8..2a24b1f0ae68 100644\n--- a/fs/crypto/keyring.c\n+++ b/fs/crypto/keyring.c\n@@ -205,14 +205,19 @@ static int allocate_filesystem_keyring(struct super_block *sb)\n }\n \n /*\n- * This is called at unmount time to release all encryption keys that have been\n- * added to the filesystem, along with the keyring that contains them.\n+ * Release all encryption keys that have been added to the filesystem, along\n+ * with the keyring that contains them.\n  *\n- * Note that besides clearing and freeing memory, this might need to evict keys\n- * from the keyslots of an inline crypto engine.  Therefore, this must be called\n- * while the filesystem's underlying block device(s) are still available.\n+ * This is called at unmount time.  The filesystem's underlying block device(s)\n+ * are still available at this time; this is important because after user file\n+ * accesses have been allowed, this function may need to evict keys from the\n+ * keyslots of an inline crypto engine, which requires the block device(s).\n+ *\n+ * This is also called when the super_block is being freed.  This is needed to\n+ * avoid a memory leak if mounting fails after the \"test_dummy_encryption\"\n+ * option was processed, as in that case the unmount-time call isn't made.\n  */\n-void fscrypt_sb_delete(struct super_block *sb)\n+void fscrypt_destroy_keyring(struct super_block *sb)\n {\n \tstruct fscrypt_keyring *keyring = sb->s_master_keys;\n \tsize_t i;\ndiff --git a/fs/super.c b/fs/super.c\nindex 6a82660e1adb..8d39e4f11cfa 100644\n--- a/fs/super.c\n+++ b/fs/super.c\n@@ -291,6 +291,7 @@ static void __put_super(struct super_block *s)\n \t\tWARN_ON(s->s_inode_lru.node);\n \t\tWARN_ON(!list_empty(&s->s_mounts));\n \t\tsecurity_sb_free(s);\n+\t\tfscrypt_destroy_keyring(s);\n \t\tput_user_ns(s->s_user_ns);\n \t\tkfree(s->s_subtype);\n \t\tcall_rcu(&s->rcu, destroy_super_rcu);\n@@ -479,7 +480,7 @@ void generic_shutdown_super(struct super_block *sb)\n \t\tevict_inodes(sb);\n \t\t/* only nonzero refcount inodes can have marks */\n \t\tfsnotify_sb_delete(sb);\n-\t\tfscrypt_sb_delete(sb);\n+\t\tfscrypt_destroy_keyring(sb);\n \t\tsecurity_sb_delete(sb);\n \n \t\tif (sb->s_dio_done_wq) {\ndiff --git a/include/linux/fscrypt.h b/include/linux/fscrypt.h\nindex cad78b569c7e..4f5f8a651213 100644\n--- a/include/linux/fscrypt.h\n+++ b/include/linux/fscrypt.h\n@@ -307,7 +307,7 @@ fscrypt_free_dummy_policy(struct fscrypt_dummy_policy *dummy_policy)\n }\n \n /* keyring.c */\n-void fscrypt_sb_delete(struct super_block *sb);\n+void fscrypt_destroy_keyring(struct super_block *sb);\n int fscrypt_ioctl_add_key(struct file *filp, void __user *arg);\n int fscrypt_add_test_dummy_key(struct super_block *sb,\n \t\t\t       const struct fscrypt_dummy_policy *dummy_policy);\n@@ -521,7 +521,7 @@ fscrypt_free_dummy_policy(struct fscrypt_dummy_policy *dummy_policy)\n }\n \n /* keyring.c */\n-static inline void fscrypt_sb_delete(struct super_block *sb)\n+static inline void fscrypt_destroy_keyring(struct super_block *sb)\n {\n }\n \n",
    "patch_modified_files": [
        "fs/crypto/keyring.c",
        "fs/super.c",
        "include/linux/fscrypt.h"
    ]
}