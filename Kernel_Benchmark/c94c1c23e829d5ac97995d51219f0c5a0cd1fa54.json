{
    "version": 1,
    "title": "memory leak in mcba_usb_probe",
    "display-title": "memory leak in mcba_usb_probe",
    "id": "c94c1c23e829d5ac97995d51219f0c5a0cd1fa54",
    "status": "fixed",
    "fix-commits": [
        {
            "title": "can: mcba_usb: fix memory leak in mcba_usb",
            "link": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=91c02557174be7f72e46ed7311e3bea1939840b0",
            "hash": "91c02557174be7f72e46ed7311e3bea1939840b0",
            "repo": "git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
            "branch": "master"
        }
    ],
    "discussions": [
        "https://lore.kernel.org/all/000000000000f599c005b6f59913@google.com/T/",
        "https://lore.kernel.org/all/20210110085436.3616-2-minhquangbui99@gmail.com/T/",
        "https://lore.kernel.org/all/20210111104927.2561-1-minhquangbui99@gmail.com/T/",
        "https://lore.kernel.org/all/20210112042755.21421-1-minhquangbui99@gmail.com/T/",
        "https://lore.kernel.org/all/20210121151053.GA3377@minh/T/",
        "https://lore.kernel.org/all/20210609215833.30393-1-paskripkin@gmail.com/T/",
        "https://lore.kernel.org/all/20210616110152.2456765-1-mkl@pengutronix.de/T/",
        "https://lore.kernel.org/all/20210621154904.159672728@linuxfoundation.org/T/",
        "https://lore.kernel.org/all/20210621154911.244649123@linuxfoundation.org/T/",
        "https://lore.kernel.org/all/20210621154921.212599475@linuxfoundation.org/T/",
        "https://lore.kernel.org/all/20210628143305.32978-1-sashal@kernel.org/T/",
        "https://lore.kernel.org/all/20210628143628.33342-1-sashal@kernel.org/T/"
    ],
    "crashes": [
        {
            "title": "",
            "syz-reproducer": "/text?tag=ReproSyz&x=14fe2b9b500000",
            "c-reproducer": "/text?tag=ReproC&x=13bd2287500000",
            "kernel-config": "/text?tag=KernelConfig&x=37c889fb8b2761af",
            "kernel-source-git": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?id=467f8165a2b0e6accf3d0dd9c8089b1dbde29f7f",
            "kernel-source-commit": "467f8165a2b0e6accf3d0dd9c8089b1dbde29f7f",
            "syzkaller-git": "https://github.com/google/syzkaller/commits/04201c0669446145fd9c347c5538da0ca13ff29b",
            "syzkaller-commit": "04201c0669446145fd9c347c5538da0ca13ff29b",
            "compiler-description": "gcc (GCC) 10.1.0-syz 20200507",
            "architecture": "amd64",
            "crash-report-link": "/text?tag=CrashReport&x=10ae7923500000"
        }
    ],
    "subsystems": [
        "usb"
    ],
    "parent_of_fix_commit": "5e87ddbe3942e27e939bdc02deb8579b0cbd8ecc",
    "patch": "diff --git a/drivers/net/can/usb/mcba_usb.c b/drivers/net/can/usb/mcba_usb.c\nindex 029e77dfa773..a45865bd7254 100644\n--- a/drivers/net/can/usb/mcba_usb.c\n+++ b/drivers/net/can/usb/mcba_usb.c\n@@ -82,6 +82,8 @@ struct mcba_priv {\n \tbool can_ka_first_pass;\n \tbool can_speed_check;\n \tatomic_t free_ctx_cnt;\n+\tvoid *rxbuf[MCBA_MAX_RX_URBS];\n+\tdma_addr_t rxbuf_dma[MCBA_MAX_RX_URBS];\n };\n \n /* CAN frame */\n@@ -633,6 +635,7 @@ static int mcba_usb_start(struct mcba_priv *priv)\n \tfor (i = 0; i < MCBA_MAX_RX_URBS; i++) {\n \t\tstruct urb *urb = NULL;\n \t\tu8 *buf;\n+\t\tdma_addr_t buf_dma;\n \n \t\t/* create a URB, and a buffer for it */\n \t\turb = usb_alloc_urb(0, GFP_KERNEL);\n@@ -642,7 +645,7 @@ static int mcba_usb_start(struct mcba_priv *priv)\n \t\t}\n \n \t\tbuf = usb_alloc_coherent(priv->udev, MCBA_USB_RX_BUFF_SIZE,\n-\t\t\t\t\t GFP_KERNEL, &urb->transfer_dma);\n+\t\t\t\t\t GFP_KERNEL, &buf_dma);\n \t\tif (!buf) {\n \t\t\tnetdev_err(netdev, \"No memory left for USB buffer\\n\");\n \t\t\tusb_free_urb(urb);\n@@ -661,11 +664,14 @@ static int mcba_usb_start(struct mcba_priv *priv)\n \t\tif (err) {\n \t\t\tusb_unanchor_urb(urb);\n \t\t\tusb_free_coherent(priv->udev, MCBA_USB_RX_BUFF_SIZE,\n-\t\t\t\t\t  buf, urb->transfer_dma);\n+\t\t\t\t\t  buf, buf_dma);\n \t\t\tusb_free_urb(urb);\n \t\t\tbreak;\n \t\t}\n \n+\t\tpriv->rxbuf[i] = buf;\n+\t\tpriv->rxbuf_dma[i] = buf_dma;\n+\n \t\t/* Drop reference, USB core will take care of freeing it */\n \t\tusb_free_urb(urb);\n \t}\n@@ -708,7 +714,14 @@ static int mcba_usb_open(struct net_device *netdev)\n \n static void mcba_urb_unlink(struct mcba_priv *priv)\n {\n+\tint i;\n+\n \tusb_kill_anchored_urbs(&priv->rx_submitted);\n+\n+\tfor (i = 0; i < MCBA_MAX_RX_URBS; ++i)\n+\t\tusb_free_coherent(priv->udev, MCBA_USB_RX_BUFF_SIZE,\n+\t\t\t\t  priv->rxbuf[i], priv->rxbuf_dma[i]);\n+\n \tusb_kill_anchored_urbs(&priv->tx_submitted);\n }\n \n",
    "patch_modified_files": [
        "drivers/net/can/usb/mcba_usb.c"
    ]
}