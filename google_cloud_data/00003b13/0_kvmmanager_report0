======================================================
WARNING: possible circular locking dependency detected
5.1.0-rc2-syzkaller #0 Not tainted
------------------------------------------------------
syz-executor.4/4721 is trying to acquire lock:
00000000d1de039d (&p->lock){+.+.}, at: seq_read+0x71/0x1130

but task is already holding lock:
00000000642b33f6 (&pipe->mutex/1){+.+.}, at: pipe_lock+0x6e/0x80

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #2 (&pipe->mutex/1){+.+.}:
       lock_acquire+0x16d/0x420
       __mutex_lock+0xf5/0x1080
       mutex_lock_nested+0x16/0x20
       fifo_open+0x160/0xe40
       do_dentry_open+0x8a4/0x10d0
       vfs_open+0xa0/0xd0
       path_openat+0xceb/0x2ea0
       do_filp_open+0x1a4/0x400
       do_open_execat+0x11e/0x660
       __do_execve_file.isra.0+0x1787/0x23c0
       do_execve+0x33/0x40
       __x64_sys_execve+0x81/0xa0
       do_syscall_64+0xff/0x190
       entry_SYSCALL_64_after_hwframe+0x49/0xbe

-> #1 (&sig->cred_guard_mutex){+.+.}:
       lock_acquire+0x16d/0x420
       __mutex_lock+0xf5/0x1080
       mutex_lock_killable_nested+0x16/0x20
       proc_pid_syscall+0xc9/0x320
       proc_single_show+0xf6/0x170
       seq_read+0x4dd/0x1130
       do_iter_read+0x49e/0x670
       vfs_readv+0xf0/0x160
       default_file_splice_read+0x466/0x880
       do_splice_to+0x123/0x180
       splice_direct_to_actor+0x2d2/0x970
       do_splice_direct+0x1e6/0x2b0
       do_sendfile+0x4ea/0xd40
       __x64_sys_sendfile64+0x1de/0x220
       do_syscall_64+0xff/0x190
       entry_SYSCALL_64_after_hwframe+0x49/0xbe

-> #0 (&p->lock){+.+.}:
       __lock_acquire+0x18c3/0x3550
       lock_acquire+0x16d/0x420
       __mutex_lock+0xf5/0x1080
       mutex_lock_nested+0x16/0x20
       seq_read+0x71/0x1130
       proc_reg_read+0x1f9/0x2b0
       do_iter_read+0x49e/0x670
       vfs_readv+0xf0/0x160
       default_file_splice_read+0x466/0x880
       do_splice_to+0x123/0x180
       do_splice+0x103d/0x1640
       __x64_sys_splice+0x2d5/0x330
       do_syscall_64+0xff/0x190
       entry_SYSCALL_64_after_hwframe+0x49/0xbe

other info that might help us debug this:

Chain exists of:
  &p->lock --> &sig->cred_guard_mutex --> &pipe->mutex/1

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(&pipe->mutex/1);
                               lock(&sig->cred_guard_mutex);
                               lock(&pipe->mutex/1);
  lock(&p->lock);

 *** DEADLOCK ***

1 lock held by syz-executor.4/4721:
 #0: 00000000642b33f6 (&pipe->mutex/1){+.+.}, at: pipe_lock+0x6e/0x80

stack backtrace:
CPU: 1 PID: 4721 Comm: syz-executor.4 Not tainted 5.1.0-rc2-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/27/2024
Call Trace:
 dump_stack+0x16c/0x1ef
 print_circular_bug.constprop.0.cold+0x162/0x171
 check_prev_add.constprop.0+0xdf6/0x2710
 __lock_acquire+0x18c3/0x3550
 lock_acquire+0x16d/0x420
 __mutex_lock+0xf5/0x1080
 mutex_lock_nested+0x16/0x20
 seq_read+0x71/0x1130
 proc_reg_read+0x1f9/0x2b0
 do_iter_read+0x49e/0x670
 vfs_readv+0xf0/0x160
 default_file_splice_read+0x466/0x880
 do_splice_to+0x123/0x180
 do_splice+0x103d/0x1640
 __x64_sys_splice+0x2d5/0x330
 do_syscall_64+0xff/0x190
 entry_SYSCALL_64_after_hwframe+0x49/0xbe
RIP: 0033:0x7fd79a2e2f69
Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 e1 20 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007fd7996420c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000113
RAX: ffffffffffffffda RBX: 00007fd79a411050 RCX: 00007fd79a2e2f69
RDX: 0000000000000006 RSI: 0000000000000000 RDI: 0000000000000007
RBP: 00007fd79a32f4a4 R08: 0000000000000002 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
R13: 000000000000006e R14: 00007fd79a411050 R15: 00007ffec53fe1b8
