{
    "version": 1,
    "title": "general protection fault in xt_rateest_tg_checkentry",
    "display-title": "general protection fault in xt_rateest_tg_checkentry",
    "id": "990d1ea15a57bc6fa79779c7c6d36be2a423bc06",
    "status": "fixed",
    "fix-commits": [
        {
            "title": "netfilter: arp_tables: init netns pointer in xt_tgchk_param struct",
            "link": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1b789577f655060d98d20ed0c6f9fbd469d6ba63",
            "hash": "1b789577f655060d98d20ed0c6f9fbd469d6ba63",
            "repo": "git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
            "branch": "master"
        }
    ],
    "cause-commit": {
        "title": "netfilter: make xt_rateest hash table per net",
        "link": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3427b2ab63faccafe774ea997fc2da7faf690c5a",
        "hash": "3427b2ab63faccafe774ea997fc2da7faf690c5a",
        "repo": "git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
        "branch": "master"
    },
    "discussions": [
        "https://lore.kernel.org/all/00000000000057fd27059aa1dfca@google.com/T/",
        "https://lore.kernel.org/all/20191227003310.16061-1-fw@strlen.de/T/",
        "https://lore.kernel.org/all/20200108231713.100458-1-pablo@netfilter.org/T/",
        "https://lore.kernel.org/all/20200114094334.725604663@linuxfoundation.org/T/",
        "https://lore.kernel.org/all/20200114094336.210038037@linuxfoundation.org/T/",
        "https://lore.kernel.org/all/20200114094336.845958665@linuxfoundation.org/T/",
        "https://lore.kernel.org/all/20200114094339.608068818@linuxfoundation.org/T/",
        "https://lore.kernel.org/all/20200114094352.428808181@linuxfoundation.org/T/",
        "https://lore.kernel.org/all/lsq.1587683027.831233700@decadent.org.uk/T/"
    ],
    "crashes": [
        {
            "title": "",
            "syz-reproducer": "/text?tag=ReproSyz&x=13713ec1e00000",
            "c-reproducer": "/text?tag=ReproC&x=1272ba49e00000",
            "kernel-config": "/text?tag=KernelConfig&x=ed9d672709340e35",
            "kernel-source-git": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?id=46cf053efec6a3a5f343fead837777efe8252a46",
            "kernel-source-commit": "46cf053efec6a3a5f343fead837777efe8252a46",
            "syzkaller-git": "https://github.com/google/syzkaller/commits/be5c2c81971442d623dd1b265dabf4644ceeb35b",
            "syzkaller-commit": "be5c2c81971442d623dd1b265dabf4644ceeb35b",
            "compiler-description": "gcc (GCC) 9.0.0 20181231 (experimental)",
            "architecture": "amd64",
            "crash-report-link": "/text?tag=CrashReport&x=11280615e00000"
        }
    ],
    "subsystems": [
        "netfilter"
    ],
    "parent_of_fix_commit": "bd6f48546b9cb7a785344fc78058c420923d7ed8",
    "patch": "diff --git a/net/ipv4/netfilter/arp_tables.c b/net/ipv4/netfilter/arp_tables.c\nindex 214154b47d56..069f72edb264 100644\n--- a/net/ipv4/netfilter/arp_tables.c\n+++ b/net/ipv4/netfilter/arp_tables.c\n@@ -384,10 +384,11 @@ next:\t\t;\n \treturn 1;\n }\n \n-static inline int check_target(struct arpt_entry *e, const char *name)\n+static int check_target(struct arpt_entry *e, struct net *net, const char *name)\n {\n \tstruct xt_entry_target *t = arpt_get_target(e);\n \tstruct xt_tgchk_param par = {\n+\t\t.net       = net,\n \t\t.table     = name,\n \t\t.entryinfo = e,\n \t\t.target    = t->u.kernel.target,\n@@ -399,8 +400,9 @@ static inline int check_target(struct arpt_entry *e, const char *name)\n \treturn xt_check_target(&par, t->u.target_size - sizeof(*t), 0, false);\n }\n \n-static inline int\n-find_check_entry(struct arpt_entry *e, const char *name, unsigned int size,\n+static int\n+find_check_entry(struct arpt_entry *e, struct net *net, const char *name,\n+\t\t unsigned int size,\n \t\t struct xt_percpu_counter_alloc_state *alloc_state)\n {\n \tstruct xt_entry_target *t;\n@@ -419,7 +421,7 @@ find_check_entry(struct arpt_entry *e, const char *name, unsigned int size,\n \t}\n \tt->u.kernel.target = target;\n \n-\tret = check_target(e, name);\n+\tret = check_target(e, net, name);\n \tif (ret)\n \t\tgoto err;\n \treturn 0;\n@@ -512,7 +514,9 @@ static inline void cleanup_entry(struct arpt_entry *e)\n /* Checks and translates the user-supplied table segment (held in\n  * newinfo).\n  */\n-static int translate_table(struct xt_table_info *newinfo, void *entry0,\n+static int translate_table(struct net *net,\n+\t\t\t   struct xt_table_info *newinfo,\n+\t\t\t   void *entry0,\n \t\t\t   const struct arpt_replace *repl)\n {\n \tstruct xt_percpu_counter_alloc_state alloc_state = { 0 };\n@@ -569,7 +573,7 @@ static int translate_table(struct xt_table_info *newinfo, void *entry0,\n \t/* Finally, each sanity check must pass */\n \ti = 0;\n \txt_entry_foreach(iter, entry0, newinfo->size) {\n-\t\tret = find_check_entry(iter, repl->name, repl->size,\n+\t\tret = find_check_entry(iter, net, repl->name, repl->size,\n \t\t\t\t       &alloc_state);\n \t\tif (ret != 0)\n \t\t\tbreak;\n@@ -974,7 +978,7 @@ static int do_replace(struct net *net, const void __user *user,\n \t\tgoto free_newinfo;\n \t}\n \n-\tret = translate_table(newinfo, loc_cpu_entry, &tmp);\n+\tret = translate_table(net, newinfo, loc_cpu_entry, &tmp);\n \tif (ret != 0)\n \t\tgoto free_newinfo;\n \n@@ -1149,7 +1153,8 @@ compat_copy_entry_from_user(struct compat_arpt_entry *e, void **dstptr,\n \t}\n }\n \n-static int translate_compat_table(struct xt_table_info **pinfo,\n+static int translate_compat_table(struct net *net,\n+\t\t\t\t  struct xt_table_info **pinfo,\n \t\t\t\t  void **pentry0,\n \t\t\t\t  const struct compat_arpt_replace *compatr)\n {\n@@ -1217,7 +1222,7 @@ static int translate_compat_table(struct xt_table_info **pinfo,\n \trepl.num_counters = 0;\n \trepl.counters = NULL;\n \trepl.size = newinfo->size;\n-\tret = translate_table(newinfo, entry1, &repl);\n+\tret = translate_table(net, newinfo, entry1, &repl);\n \tif (ret)\n \t\tgoto free_newinfo;\n \n@@ -1270,7 +1275,7 @@ static int compat_do_replace(struct net *net, void __user *user,\n \t\tgoto free_newinfo;\n \t}\n \n-\tret = translate_compat_table(&newinfo, &loc_cpu_entry, &tmp);\n+\tret = translate_compat_table(net, &newinfo, &loc_cpu_entry, &tmp);\n \tif (ret != 0)\n \t\tgoto free_newinfo;\n \n@@ -1546,7 +1551,7 @@ int arpt_register_table(struct net *net,\n \tloc_cpu_entry = newinfo->entries;\n \tmemcpy(loc_cpu_entry, repl->entries, repl->size);\n \n-\tret = translate_table(newinfo, loc_cpu_entry, repl);\n+\tret = translate_table(net, newinfo, loc_cpu_entry, repl);\n \tif (ret != 0)\n \t\tgoto out_free;\n \n",
    "patch_modified_files": [
        "net/ipv4/netfilter/arp_tables.c"
    ]
}