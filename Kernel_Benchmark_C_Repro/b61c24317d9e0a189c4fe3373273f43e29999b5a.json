{
    "version": 1,
    "title": "KASAN: use-after-free Read in seccomp_notify_release",
    "display-title": "KASAN: use-after-free Read in seccomp_notify_release (2)",
    "id": "b61c24317d9e0a189c4fe3373273f43e29999b5a",
    "status": "fixed",
    "fix-commits": [
        {
            "title": "seccomp: Make NEW_LISTENER and TSYNC flags exclusive",
            "link": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7a0df7fbc14505e2e2be19ed08654a09e1ed5bf6",
            "hash": "7a0df7fbc14505e2e2be19ed08654a09e1ed5bf6",
            "repo": "git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
            "branch": "master"
        }
    ],
    "cause-commit": {
        "title": "netfilter: nft_flow_offload: Fix reverse route lookup",
        "link": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=a799aea0988ea0d1b1f263e996fdad2f6133c680",
        "hash": "a799aea0988ea0d1b1f263e996fdad2f6133c680",
        "repo": "git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
        "branch": "master"
    },
    "discussions": [
        "https://lore.kernel.org/all/000000000000c8f45a0584e69ea9@google.com/T/",
        "https://lore.kernel.org/all/20190306201413.14153-1-tycho@tycho.ws/T/",
        "https://lore.kernel.org/all/20190424163756.40001-1-keescook@chromium.org/T/",
        "https://lore.kernel.org/all/20190429195836.GA30688@beast/T/",
        "https://lore.kernel.org/all/20190506143054.670334917@linuxfoundation.org/T/"
    ],
    "crashes": [
        {
            "title": "",
            "syz-reproducer": "/text?tag=ReproSyz&x=162ca25d200000",
            "c-reproducer": "/text?tag=ReproC&x=1733b53b200000",
            "kernel-config": "/text?tag=KernelConfig&x=9a31fb246de2a622",
            "kernel-source-git": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?id=1bdd3dbfff7a308643c7f9ef74e4a8ef3923e686",
            "kernel-source-commit": "1bdd3dbfff7a308643c7f9ef74e4a8ef3923e686",
            "syzkaller-git": "https://github.com/google/syzkaller/commits/acbc5b7d05ff9d1ff890aa24f42a334e613445f7",
            "syzkaller-commit": "acbc5b7d05ff9d1ff890aa24f42a334e613445f7",
            "compiler-description": "gcc (GCC) 9.0.0 20181231 (experimental)",
            "architecture": "amd64",
            "crash-report-link": "/text?tag=CrashReport&x=13276da3200000"
        }
    ],
    "subsystems": [
        "kernel"
    ],
    "parent_of_fix_commit": "4ee0776760af03f181e6b80baf5fb1cc1a980f50",
    "patch": "diff --git a/kernel/seccomp.c b/kernel/seccomp.c\nindex 54a0347ca812..4b51d9cbcf06 100644\n--- a/kernel/seccomp.c\n+++ b/kernel/seccomp.c\n@@ -502,7 +502,10 @@ seccomp_prepare_user_filter(const char __user *user_filter)\n  *\n  * Caller must be holding current->sighand->siglock lock.\n  *\n- * Returns 0 on success, -ve on error.\n+ * Returns 0 on success, -ve on error, or\n+ *   - in TSYNC mode: the pid of a thread which was either not in the correct\n+ *     seccomp mode or did not have an ancestral seccomp filter\n+ *   - in NEW_LISTENER mode: the fd of the new listener\n  */\n static long seccomp_attach_filter(unsigned int flags,\n \t\t\t\t  struct seccomp_filter *filter)\n@@ -1258,6 +1261,16 @@ static long seccomp_set_mode_filter(unsigned int flags,\n \tif (flags & ~SECCOMP_FILTER_FLAG_MASK)\n \t\treturn -EINVAL;\n \n+\t/*\n+\t * In the successful case, NEW_LISTENER returns the new listener fd.\n+\t * But in the failure case, TSYNC returns the thread that died. If you\n+\t * combine these two flags, there's no way to tell whether something\n+\t * succeeded or failed. So, let's disallow this combination.\n+\t */\n+\tif ((flags & SECCOMP_FILTER_FLAG_TSYNC) &&\n+\t    (flags & SECCOMP_FILTER_FLAG_NEW_LISTENER))\n+\t\treturn -EINVAL;\n+\n \t/* Prepare the new filter before holding any locks. */\n \tprepared = seccomp_prepare_user_filter(filter);\n \tif (IS_ERR(prepared))\n@@ -1304,7 +1317,7 @@ static long seccomp_set_mode_filter(unsigned int flags,\n \t\tmutex_unlock(&current->signal->cred_guard_mutex);\n out_put_fd:\n \tif (flags & SECCOMP_FILTER_FLAG_NEW_LISTENER) {\n-\t\tif (ret < 0) {\n+\t\tif (ret) {\n \t\t\tlistener_f->private_data = NULL;\n \t\t\tfput(listener_f);\n \t\t\tput_unused_fd(listener);\n",
    "patch_modified_files": [
        "kernel/seccomp.c"
    ]
}