{
    "version": 1,
    "title": "kernel BUG at fs/f2fs/inode.c:LINE!",
    "display-title": "kernel BUG at fs/f2fs/inode.c:LINE!",
    "id": "e9a7ecc060e3b7cf35b9754e384fe18658589bf2",
    "status": "fixed",
    "fix-commits": [
        {
            "title": "f2fs: avoid bug_on on corrupted inode",
            "link": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=5d64600d4f337dc2bb89cd59da99f452f5e4f3c3",
            "hash": "5d64600d4f337dc2bb89cd59da99f452f5e4f3c3",
            "repo": "git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
            "branch": "master"
        }
    ],
    "discussions": [
        "https://lore.kernel.org/all/000000000000aa1e22056a5661df@google.com/T/",
        "https://lore.kernel.org/all/20180424194718.71944-1-jaegeuk@kernel.org/T/",
        "https://lore.kernel.org/all/20180425054613.2700-1-jaegeuk@kernel.org/T/",
        "https://lore.kernel.org/all/20180716073443.294323458@linuxfoundation.org/T/"
    ],
    "crashes": [
        {
            "title": "",
            "syz-reproducer": "/text?tag=ReproSyz&x=11d7bd3b800000",
            "c-reproducer": "/text?tag=ReproC&x=1046553b800000",
            "kernel-config": "/text?tag=KernelConfig&x=191a2635dcad1c46",
            "kernel-source-git": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?id=43f70c960180c11d64ee3e9e53075fe1acd43ff1",
            "kernel-source-commit": "43f70c960180c11d64ee3e9e53075fe1acd43ff1",
            "syzkaller-git": "https://github.com/google/syzkaller/commits/cc402841ba1e067327a4adaf0a65335e47b5e83c",
            "syzkaller-commit": "cc402841ba1e067327a4adaf0a65335e47b5e83c",
            "compiler-description": "gcc (GCC) 8.0.1 20180413 (experimental)",
            "architecture": "amd64",
            "crash-report-link": "/text?tag=CrashReport&x=112aa65b800000"
        }
    ],
    "subsystems": [
        "f2fs"
    ],
    "parent_of_fix_commit": "a4f843bd004d775cbb360cd375969b8a479568a9",
    "patch": "diff --git a/fs/f2fs/inode.c b/fs/f2fs/inode.c\nindex 414b1ede642b..7f2fe4574c48 100644\n--- a/fs/f2fs/inode.c\n+++ b/fs/f2fs/inode.c\n@@ -185,6 +185,21 @@ void f2fs_inode_chksum_set(struct f2fs_sb_info *sbi, struct page *page)\n \tri->i_inode_checksum = cpu_to_le32(f2fs_inode_chksum(sbi, page));\n }\n \n+static bool sanity_check_inode(struct inode *inode)\n+{\n+\tstruct f2fs_sb_info *sbi = F2FS_I_SB(inode);\n+\n+\tif (f2fs_sb_has_flexible_inline_xattr(sbi->sb)\n+\t\t\t&& !f2fs_has_extra_attr(inode)) {\n+\t\tset_sbi_flag(sbi, SBI_NEED_FSCK);\n+\t\tf2fs_msg(sbi->sb, KERN_WARNING,\n+\t\t\t\"%s: corrupted inode ino=%lx, run fsck to fix.\",\n+\t\t\t__func__, inode->i_ino);\n+\t\treturn false;\n+\t}\n+\treturn true;\n+}\n+\n static int do_read_inode(struct inode *inode)\n {\n \tstruct f2fs_sb_info *sbi = F2FS_I_SB(inode);\n@@ -235,7 +250,6 @@ static int do_read_inode(struct inode *inode)\n \t\t\t\t\tle16_to_cpu(ri->i_extra_isize) : 0;\n \n \tif (f2fs_sb_has_flexible_inline_xattr(sbi->sb)) {\n-\t\tf2fs_bug_on(sbi, !f2fs_has_extra_attr(inode));\n \t\tfi->i_inline_xattr_size = le16_to_cpu(ri->i_inline_xattr_size);\n \t} else if (f2fs_has_inline_xattr(inode) ||\n \t\t\t\tf2fs_has_inline_dentry(inode)) {\n@@ -313,6 +327,10 @@ struct inode *f2fs_iget(struct super_block *sb, unsigned long ino)\n \tret = do_read_inode(inode);\n \tif (ret)\n \t\tgoto bad_inode;\n+\tif (!sanity_check_inode(inode)) {\n+\t\tret = -EINVAL;\n+\t\tgoto bad_inode;\n+\t}\n make_now:\n \tif (ino == F2FS_NODE_INO(sbi)) {\n \t\tinode->i_mapping->a_ops = &f2fs_node_aops;\n",
    "patch_modified_files": [
        "fs/f2fs/inode.c"
    ]
}